"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HRVmodel_1 = require("./HRVmodel");
var FFT = require('fft.js');
var linspace = require('linspace');
var HRV = (function () {
    function HRV() {
        this.f = new FFT(256);
        this.hz = 0;
    }
    HRV.prototype.setQueue = function (queue) {
        this.list = queue;
    };
    HRV.prototype.step = function () {
        var out;
        out = linspace(0, 1, 256);
        var samplerate = 1000 / this.list.mean();
        for (var i in out) {
            out[i] = samplerate / 2 * out[i];
        }
        return out;
    };
    HRV.prototype.calElement = function (list) {
        this.VLF = 0;
        this.LF = 0;
        this.HF = 0;
        this.TP = 0;
        var count = 0;
        for (var i in list) {
            var hz = parseFloat(i);
            if (hz > 0 && hz <= 0.04) {
                this.VLF += list[hz];
            }
            if (hz > 0.04 && hz <= 0.15) {
                this.LF += list[hz];
            }
            if (hz > 0.15 && hz <= 0.4) {
                this.HF += list[hz];
            }
            //console.log(String(count++) + ":" + String(hz) + ":" + String(list[hz]));
            this.TP += list[hz];
        }
    };
    HRV.prototype.toFFT = function (list) {
        var out = this.f.createComplexArray();
        var data = this.f.toComplexArray(list.toNumberArray());
        this.f.realTransform(out, data);
        return out;
    };
    HRV.prototype.calHRV = function () {
        var nfft = 256;
        var fft = this.toFFT(this.list);
        var xfft = new Array(fft.length);
        var j = -1;
        var faxis = this.step();
        for (var _i = 0, faxis_1 = faxis; _i < faxis_1.length; _i++) {
            var i = faxis_1[_i];
            xfft[i] = Math.abs(fft[j++]) ^ 2 / nfft;
            //console.log(String(j)+":"+String(i) +":"+ String(xfft[i]));
        }
        this.calElement(xfft);
        this.nHF = this.HF / (this.TP - this.VLF);
        this.nLF = this.LF / (this.TP - this.VLF);
        console.log(this.LF);
        console.log(this.HF);
        console.log(this.nLF);
        console.log(this.nHF);
        /*alert("nHF : " + String(this.nHF)+ "\n" +
              "nLF : " + String(this.nLF) + "\n" +
              "HRV : " + String(this.nHF/this.nLF));*/
        return new HRVmodel_1.HRVmodel(this.nHF, this.nLF, this.LF / this.HF);
    };
    return HRV;
}());
exports.HRV = HRV;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsSFJWLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2FsSFJWLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsdUNBQW9DO0FBQ3BDLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFHbkM7SUFBQTtRQUVZLE1BQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQVF6QixPQUFFLEdBQVUsQ0FBQyxDQUFDO0lBc0VsQixDQUFDO0lBckVVLHNCQUFRLEdBQWYsVUFBZ0IsS0FBVztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ08sa0JBQUksR0FBWjtRQUNJLElBQUksR0FBRyxDQUFDO1FBQ1IsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZCLElBQUksVUFBVSxHQUFHLElBQUksR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBLENBQUM7WUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUksVUFBVSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUNELE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDZixDQUFDO0lBR08sd0JBQVUsR0FBbEIsVUFBbUIsSUFBa0I7UUFDakMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFBRyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEQsSUFBSSxLQUFLLEdBQUcs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QUMsR0FBRyxFQUFDLElBQUksQ0FBQyxHQUFHLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUdMLFVBQUM7QUFBRCxDQUFDLEFBaEZELElBZ0ZDO0FBaEZZLGtCQUFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtRdWV1ZX0gZnJvbSAnLi9RdWV1ZSdcclxuaW1wb3J0IHtoZWFydG1vZGVsfSBmcm9tICcuL2hlYXJ0Lm1vZGVsLidcclxuaW1wb3J0IHtIUlZtb2RlbH0gZnJvbSAnLi9IUlZtb2RlbCc7XHJcbnZhciBGRlQgPSByZXF1aXJlKCdmZnQuanMnKTtcclxudmFyIGxpbnNwYWNlID0gcmVxdWlyZSgnbGluc3BhY2UnKTtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgSFJWe1xyXG4gICAgXHJcbiAgICBwcml2YXRlIGYgPSBuZXcgRkZUKDI1Nik7XHJcbiAgICBwcml2YXRlIFRQOm51bWJlcjtcclxuICAgIHByaXZhdGUgbkhGOm51bWJlcjtcclxuICAgIHByaXZhdGUgbkxGOm51bWJlcjtcclxuICAgIHByaXZhdGUgSEY6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBMRjpudW1iZXI7XHJcbiAgICBwcml2YXRlIFZMRjpudW1iZXI7XHJcbiAgICBwcml2YXRlIGxpc3Q6UXVldWU7XHJcbiAgICBoejpudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIHNldFF1ZXVlKHF1ZXVlOlF1ZXVlKXtcclxuICAgICAgICB0aGlzLmxpc3QgPSBxdWV1ZTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RlcCgpOkFycmF5PG51bWJlcj57ICAgICAgICAgICAgICAgLy9idWlsZCBpbmRleCBmb3IgcHNkIHgtYXhpc1xyXG4gICAgICAgIGxldCBvdXQ7XHJcbiAgICAgICAgb3V0ID0gbGluc3BhY2UoMCwxLDI1NilcclxuICAgICAgICBsZXQgc2FtcGxlcmF0ZSA9IDEwMDAvdGhpcy5saXN0Lm1lYW4oKTtcclxuICAgICAgICBmb3IgKGxldCBpIGluIG91dCl7XHJcbiAgICAgICAgICAgIG91dFtpXSA9ICBzYW1wbGVyYXRlIC8gMiAqIG91dFtpXTtcclxuICAgICAgICB9ICAgXHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICBwcml2YXRlIGNhbEVsZW1lbnQobGlzdDpBcnJheTxudW1iZXI+KXsgICAvL2NhbHVsYXRlIEhSViBlbGVtZW50OlZMRigwfjAuMDQpIExGKDAuMDR+MC4xNSkgSEYoMC4xNX4wLjQpXHJcbiAgICAgICAgdGhpcy5WTEYgPSAwOyAgIHRoaXMuTEYgPSAwOyB0aGlzLkhGID0gMDsgdGhpcy5UUCA9IDA7XHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgIGZvciAobGV0IGkgaW4gbGlzdCl7XHJcbiAgICAgICAgICAgbGV0IGh6ID1wYXJzZUZsb2F0KGkpO1xyXG4gICAgICAgICAgIGlmIChoeiA+MCAmJiBoeiA8PSAwLjA0KXtcclxuICAgICAgICAgICAgICAgdGhpcy5WTEYrPWxpc3RbaHpdO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgICBpZiAoaHogPjAuMDQgJiYgaHo8PTAuMTUpe1xyXG4gICAgICAgICAgICAgICB0aGlzLkxGKz1saXN0W2h6XTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICAgaWYgKGh6ID4wLjE1ICYmIGh6IDw9MC40KXtcclxuICAgICAgICAgICAgICAgdGhpcy5IRis9bGlzdFtoel07XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgIC8vY29uc29sZS5sb2coU3RyaW5nKGNvdW50KyspICsgXCI6XCIgKyBTdHJpbmcoaHopICsgXCI6XCIgKyBTdHJpbmcobGlzdFtoel0pKTtcclxuICAgICAgICAgICB0aGlzLlRQICs9IGxpc3RbaHpdO1xyXG4gICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdG9GRlQobGlzdDpRdWV1ZSk6YW55eyAgICAgIC8vdXNlIGZmdCBhcGkgdG8gY29tcHV0ZVxyXG4gICAgICAgIGxldCBvdXQgPSB0aGlzLmYuY3JlYXRlQ29tcGxleEFycmF5KCk7XHJcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmYudG9Db21wbGV4QXJyYXkobGlzdC50b051bWJlckFycmF5KCkpXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5mLnJlYWxUcmFuc2Zvcm0ob3V0LGRhdGEpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBjYWxIUlYoKTpIUlZtb2RlbHtcclxuICAgICAgICBsZXQgbmZmdCA9IDI1NjtcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBsZXQgZmZ0ID0gdGhpcy50b0ZGVCh0aGlzLmxpc3QpO1xyXG4gICAgICAgIGxldCB4ZmZ0ID0gbmV3IEFycmF5PG51bWJlcj4oZmZ0Lmxlbmd0aCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGogPSAtMTtcclxuICAgICAgICBsZXQgZmF4aXMgPSB0aGlzLnN0ZXAoKTtcclxuICAgICAgICBmb3IobGV0IGkgb2YgZmF4aXMpe1xyXG4gICAgICAgICAgICB4ZmZ0W2ldID0gTWF0aC5hYnMoZmZ0W2orK10pIF4gMiAvIG5mZnQ7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coU3RyaW5nKGopK1wiOlwiK1N0cmluZyhpKSArXCI6XCIrIFN0cmluZyh4ZmZ0W2ldKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FsRWxlbWVudCh4ZmZ0KTtcclxuICAgICAgICB0aGlzLm5IRiA9IHRoaXMuSEYgLyAodGhpcy5UUCAtIHRoaXMuVkxGKTtcclxuICAgICAgICB0aGlzLm5MRiA9IHRoaXMuTEYgLyAodGhpcy5UUCAtIHRoaXMuVkxGKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLkxGKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLkhGKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm5MRik7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5uSEYpO1xyXG4gICAgICAgIC8qYWxlcnQoXCJuSEYgOiBcIiArIFN0cmluZyh0aGlzLm5IRikrIFwiXFxuXCIgK1xyXG4gICAgICAgICAgICAgIFwibkxGIDogXCIgKyBTdHJpbmcodGhpcy5uTEYpICsgXCJcXG5cIiArIFxyXG4gICAgICAgICAgICAgIFwiSFJWIDogXCIgKyBTdHJpbmcodGhpcy5uSEYvdGhpcy5uTEYpKTsqL1xyXG4gICAgICAgIHJldHVybiBuZXcgSFJWbW9kZWwodGhpcy5uSEYsdGhpcy5uTEYsdGhpcy5MRi90aGlzLkhGKTtcclxuICAgIH1cclxuICAgIFxyXG5cclxufSJdfQ==