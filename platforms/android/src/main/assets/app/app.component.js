"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var bluetoothservice_1 = require("./bluetoothservice");
var Receiver_1 = require("./model/Receiver");
var firebase = require("nativescript-plugin-firebase");
var platform_1 = require("platform");
var linspace = require('linspace');
var AppComponent = (function () {
    function AppComponent(Service) {
        this.Service = Service;
        this.bpm = 'bpm';
        this.singal = 'singal';
        this.ibi = 'ibi';
        this.Connect = 'Connect';
        this.read = 'close';
        this.complete = 'complete';
        this.receiver = new Receiver_1.Receiver();
        this.editState = true;
        this.tvtext = "";
        this.firstTx = "";
        this.isEnable = false;
        firebase.init({}).then(function (instance) {
            console.log("firebase.init done");
        }, function (error) {
            console.log("firebase.init error: " + error);
        });
        /*firebase.login({
            type:firebase.LoginType.ANONYMOUS
        }).then((user)=>{
            alert(user.uid);
        });*/
        firebase.login({
            type: firebase.LoginType.FACEBOOK,
            // Optional
            facebookOptions: {
                // defaults to ['public_profile', 'email']
                scope: ['public_profile', 'email']
            }
        }).then(function (result) {
            JSON.stringify(result);
            console.log('sucessful');
        }, function (errorMessage) {
            console.log(errorMessage);
        });
    }
    AppComponent.prototype.ConnectFunction = function () {
        //alert('bluetooth device not ready');
        this.Service.connectToArduino();
    };
    AppComponent.prototype.ControlRead = function () {
        var _this = this;
        if (this.isEnable) {
            this.Service.StopRead();
            this.read = 'CLOSE';
        }
        else {
            this.Service.StartRead(this.receiver);
            this.isEnable = true;
            this.read = 'OPEN';
            var timer = setInterval(function () {
                _this.ibi = String(_this.receiver.getIBI());
                _this.complete = String(_this.receiver.getLength());
            }, 100);
        }
    };
    AppComponent.prototype.test = function () {
        /*for(let i of this.newstep()){
            console.log(String(i));
        }*/
        alert("Text: " + this.firstTx);
    };
    AppComponent.prototype.addData = function () {
        this.receiver.setDataName(this.firstTx);
        //alert(this.firstTx);
    };
    AppComponent.prototype.test2 = function () {
    };
    AppComponent.prototype.newstep = function () {
        var step;
        step = linspace(0, 1, 256);
        var samplerate = 1 / 800 * 1000;
        for (var i in step) {
            step[i] = samplerate / 2 * step[i];
        }
        return step;
    };
    AppComponent.prototype.onTextChange = function (args) {
        var textField = args.object;
        console.log("onTextChange");
        this.firstTx = textField.text;
    };
    AppComponent.prototype.showText = function () {
        alert("Text: " + this.tvtext);
    };
    AppComponent.prototype.submit = function (args) {
        var textview = args.object;
        if (platform_1.isAndroid) {
            textview.android.clearFocus();
        }
    };
    return AppComponent;
}());
AppComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        moduleId: module.id,
        templateUrl: "app.component.html",
    }),
    __metadata("design:paramtypes", [bluetoothservice_1.bluetoothservice])
], AppComponent);
exports.AppComponent = AppComponent;
//# sourceMappingURL=data:application/json;base64,